import os

logs_dir = config['elvers_directories']['logs']

getRef_params = config['get_reference']['program_params']
ep_params = config['get_reference']['elvers_params']

ref_dir = ep_params['outdir']
basename = config['basename']
reference_extension = getRef_params.get('reference_extension', '')

# set up the vars we use in each of these options
if getRef_params.get('download_ref'):
    ref_in =getRef_params['reference']
else:
    ref_in = os.path.realpath(getRef_params['reference'])

gunzip_ref = False
ref_out    =  os.path.join(ref_dir, basename + reference_extension + '.fasta')
if ref_in.endswith('.gz'):
    gunzip_ref = True
    ref_out_gunzip = ref_out
    ref_out = ref_out + '.gz'

if getRef_params.get('gene_trans_map', None):
    gtmap_in   =  os.path.realpath(getRef_params['gene_trans_map'])
    gtmap_out  =  os.path.join(ref_dir, basename + reference_extension + '.fasta.gene_trans_map') 

if getRef_params.get('download_ref'):
    if getRef_params.get('use_ftp'):
        rule ftp_get_fasta:
            input: FTP.remote(f"{ref_in}", static=True, keep_local=True, immediate_close=True)
            output: ref_out 
            log: os.path.join(logs_dir, 'get_reference/ftpget_reference.log')
            shell: "mv {input} {output} 2> {log}"
        
        if getRef_params.get('gene_trans_map', None): 
            rule ftp_get_gene_trans_map:
                input: FTP.remote(f"{gtmap_in}", static=True, keep_local=True, immediate_close=True)
                output: gtmap_out
                log: os.path.join(logs_dir, 'get_reference/ftpget_gtmap.log')
                shell: "mv {input} {output} 2> {log}"
    
    else:
        rule http_get_fasta:
            input: HTTP.remote(f"{ref_in}", static=True, keep_local=True, allow_redirects=True)
            output: ref_out 
            log: os.path.join(logs_dir, 'get_reference/httpget_reference.log')
            shell: "mv {input} {output} 2> {log}"

        if getRef_params.get('gene_trans_map', None): 
            rule http_get_gene_trans_map:
                input: HTTP.remote(f"{gtmap_in}", static=True, keep_local=True, allow_redirects=True)
                output: gtmap_out
                log: os.path.join(logs_dir, 'get_reference/httpget_gtmap.log')
                shell: "mv {input} {output} 2> {log}"

else:
    rule link_input_reference:
        input: ref_in 
        output: ref_out 
        log: os.path.join(logs_dir, 'get_reference/link_reference.log')
        params: ref_dir = ref_dir
        shell:
            """
            mkdir -p {params.ref_dir}
            ln -s {input} {output} 2> {log}
            """
    if getRef_params.get('gene_trans_map', None):
        rule link_input_gene_trans_map:
            input: gtmap_in 
            output: gtmap_out 
            log: os.path.join(logs_dir, 'get_reference/link_gtmap.log')
            params: ref_dir = ref_dir
            shell:
                """
                mkdir -p {params.ref_dir}
                ln -s {input} {output} 2> {log}
                """

if gunzip_ref:
    rule gunzip_input_reference:
        input: ref_out
        output: ref_out_gunzip
        log: os.path.join(logs_dir, 'get_reference/gunzip_reference.log')
        shell:
            """
            gunzip -c {input} > {output} 2> {log}
            """
