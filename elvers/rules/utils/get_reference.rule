import os
import shutil

logs_dir = config['elvers_directories']['logs']

prog_params = config['get_reference']['program_params']
ep_params = config['get_reference']['elvers_params']

ref_dir = ep_params['outputs']['outdir']
basename = config['basename']
reference_extension = prog_params.get('reference_extension', '')

# build reference dictionaries
if config.get('reference_info'):
    get_fa,get_gtm,get_fa,get_gtm,get_fa,get_gtm = {},{},{},{},{},{}
    ref_info = config['reference_info']
    for extension, info in ref_info.items():
        if extension == "no_extension":
            extension = ""
        name = basename + extension
        print(name)
        ref = info['reference']
        print(ref)
        if ref.startswith("http"):
            get_fa[name] = f"HTTP.remote({ref}, static=True, keep_local=True, allow_redirects=True)"
        elif ref.startswith("ftp"):
            get_fa[name] = f"FTP.remote({ref}, static=True, keep_local=True, immediate_close=True)"
        else:
            get_fa[name] = ref
        if info.get("gene_trans_map"):
            gtm = info["gene_trans_map"]
            print(gtm)
            if gtm.startswith("http"):
                get_gtm[name] = f"HTTP.remote({gtm}, static=True, keep_local=True, allow_redirects=True)"
            elif gtm.startswith("ftp"):
                get_gtm[name] = f"FTP.remote({gtm}, static=True, keep_local=True, immediate_close=True)"
            else:
                get_gtm[name] = gtm

GZIP_MAGIC_NUMBER = "1f8b"

localrules: get_fasta

rule get_fasta:
    input: lambda w: get_fa[w.name]
    output: os.path.join(ref_dir, "{name}.fasta")
    log: os.path.join(logs_dir, 'get_reference/get_ref_{name}.log')
    params: ref_dir = ref_dir
    run: 
        shell("mkdir -p {params.ref_dir}")
        with open({input}) as f:
            if f.read(2).encode("hex") == GZIP_MAGIC_NUMBER:
                shell("gunzip -c {input} > {output} 2> {log}")
            else:
                os.rename({input}, {output})

if get_gtm:

    localrules: get_gene_trans_map 
    
    rule get_gene_trans_map:
        input: lambda w: get_gtm[w.name]
        output: os.path.join(ref_dir, "{name}.gene_trans_map")
        log: os.path.join(logs_dir, 'get_reference/get_gtmap_{name}.log')
        params: ref_dir = ref_dir
        run: 
            shell("mkdir -p {params.ref_dir}")
            with open({input}) as f:
                if f.read(2).encode("hex") == GZIP_MAGIC_NUMBER:
                    shell("gunzip -c {input} > {output} 2> {log}")
                else:
                    os.rename({input}, {output})
