import os

ref_dir = config["get_reference"]["output_dir"]
ref_in = config['input_reference']

gunzip_ref = False
if ref_in.endswith('.gz'):
    gunzip_ref = True

rule get_reference:
    input: config["input_reference"]
    output: os.path.join(ref_dir, basename + '_refinput.fasta')
    log: os.path.join(logs_dir, 'get_reference/get_reference.log')
    threads: 1
    resources:
        mem_mb=1000,
        runtime=60
    run:
        if gunzip_ref:
            tmp_out = str(output).rsplit(".gz")[0]
            if str(input).startswith(tuple(urls_begin)):
                shell("curl -L {input} > {tmp_out}")
                shell("gunzip -c {tmp_out} > {full_output}  2> {log}")
            else:
                full_input = os.path.abspath(str(input))
                full_output = os.path.abspath(str(output))
                shell("cp {full_input} {full_output} 2> {log}")
                shell("gunzip -c {tmp_out} > {full_output} 2> {log}")
        else:
            if str(input).startswith(tuple(urls_begin)):
                shell("curl -L {input}  > {output}")
            else:
                full_input = os.path.abspath(str(input))
                full_output = os.path.abspath(str(output))
                shell("cp {full_input} {full_output} 2> {log}")



rule get_gene_trans_map:
    input: config.get("input_gene_trans_map")
    output: os.path.join(ref_dir, basename + '_refinput.fasta.gene_trans_map')
    log: os.path.join(logs_dir, 'get_reference/get_genetransmap.log')
    threads: 1
    resources:
        mem_mb=1000,
        runtime=60
    run:
        if str(input).startswith(tuple(urls_begin)):
            shell("curl -L {input}  > {output}")
        else:
            full_input = os.path.abspath(str(params.fq_info))
            full_output = os.path.abspath(str(output))
            shell("ln -s {full_input} {full_output} 2> {log}")
