import os

logs_dir = config['elvers_directories']['logs']

prog_params = config['get_reference']['program_params']
ep_params = config['get_reference']['elvers_params']

ref_dir = ep_params['outputs']['outdir']
basename = config['basename']

## THIS SHOULD CHANGE

reference_extension = prog_params.get('reference_extension', '')

# set up the vars we use in each of these options
#if prog_params.get('download_ref'):
#    ref_in =prog_params['reference']
#else:
#    ref_in = os.path.realpath(prog_params['reference'])

#gunzip_ref = False
#ref_out    =  os.path.join(ref_dir, basename + reference_extension + '.fasta')
if ref_in.endswith('.gz'):
    gunzip_ref = True
    ref_out_gunzip = ref_out
    ref_out = ref_out + '.gz'

if prog_params.get('gene_trans_map', None):
    gtmap_in   =  os.path.realpath(prog_params['gene_trans_map'])
    gtmap_out  =  os.path.join(ref_dir, basename + reference_extension + '.fasta.gene_trans_map') 




# solution to generating correct files: use ref_ext as wildcard, grab input from prog_params[ref_ext]['reference'] 

def get_ftp_input(w):
    if ref_ext == "":
        ref_file = prog_params['reference']
        return ref_file
    else:
        ref_ext.split('_',1)[1] # remove leading "_" if it exists
        ref_info = prog_params[w.ref_ext]
        ref_file = ref_info['reference']
        if ref_file.startswith('ftp'):
            return ref_file
        
def get_http_input(w):
    if ref_ext == "":
        ref_file = prog_params['reference']
        return ref_file
    else:
        ref_info = prog_params[w.ref_ext]
        ref_file = ref_info['reference']
        if ref_file.startswith('http'):
            return ref_file

def get_link_input(w):
    if ref_ext == "":
        ref_file = prog_params['reference']
        return ref_file
    else:
        ref_info = prog_params[w.ref_ext]
        ref_file = ref_info['reference']
        if not ref_file.startswith('http') and not ref_file.startswith('ftp'):
            return ref_file
   
   
   
   
#rule link_fasta:
#    input: make_input
#    output: basename + "{ref_ext}.fasta" # handle the "_" in the function above (so we enable "" as a valid extension
#    shell: cp {input} {output}


rule ftp_get_fasta:
    input: lambda wildcards: FTP.remote(f"{ref_in}", static=True, keep_local=True, immediate_close=True)
    output: basename + "{ref_ext}.fasta"
    log: os.path.join(logs_dir, 'get_reference/ftpget_reference.log')
    shell: "mv {input} {output} 2> {log}"

#if prog_params.get('gene_trans_map', None): 
rule ftp_get_gene_trans_map:
    input: lambda wildcards: FTP.remote(f"{gtmap_in}", static=True, keep_local=True, immediate_close=True)
    output: gtmap_out
    log: os.path.join(logs_dir, 'get_reference/ftpget_gtmap.log')
    shell: "mv {input} {output} 2> {log}"

#else:
rule http_get_fasta:
    input: lambda wildcards: HTTP.remote(f"{ref_in}", static=True, keep_local=True, allow_redirects=True)
    output: ref_out 
    log: os.path.join(logs_dir, 'get_reference/httpget_reference.log')
    shell: "mv {input} {output} 2> {log}"

#if prog_params.get('gene_trans_map', None): 
rule http_get_gene_trans_map:
    input: lambda wildcards: HTTP.remote(f"{gtmap_in}", static=True, keep_local=True, allow_redirects=True)
    output: gtmap_out
    log: os.path.join(logs_dir, 'get_reference/httpget_gtmap.log')
    shell: "mv {input} {output} 2> {log}"

#else:
rule link_input_reference:
    input: get_link_input 
    output: ref_out 
    log: os.path.join(logs_dir, 'get_reference/link_reference.log')
    params: ref_dir = ref_dir
    shell:
        """
        mkdir -p {params.ref_dir}
        ln -s {input} {output} 2> {log}
        """
#if prog_params.get('gene_trans_map', None):
rule link_input_gene_trans_map:
    input: gtmap_in 
    output: gtmap_out 
    log: os.path.join(logs_dir, 'get_reference/link_gtmap.log')
    params: ref_dir = ref_dir
    shell:
        """
        mkdir -p {params.ref_dir}
        ln -s {input} {output} 2> {log}
        """

if gunzip_ref:
    rule gunzip_input_reference:
        input: ref_out
        output: ref_out_gunzip
        log: os.path.join(logs_dir, 'get_reference/gunzip_reference.log')
        shell:
            """
            gunzip -c {input} > {output} 2> {log}
            """
