from os.path import join

logs_dir  = config['elvers_directories']['logs']

khmer_dir = config['khmer']['elvers_params']['outputs']['outdir']
khmer_params = config['khmer']['program_params']
diginorm = khmer_params.get('diginorm', True)

if khmer_params.get('input_trimmed', True):
    input_dir = config['elvers_directories']['outdirs']['preprocess']
    ext = '.trim.fq.gz'
elif khmer_params.get('input_rcorrector_trimmed', False):
    input_dir = os.path.join(config['elvers_directories']['outdirs']['preprocess'], 'rcorrector')
    ext = '.rcorr.fq.gz'
else:
    input_dir = config['elvers_directories']['outdirs']['input_data']
    ext = '.fq.gz'

def get_khmer_inputs(w):
    readsD = {}
    if not is_single_end(**w):
        readsD['r1'] = expand(join(input_dir, '{sample}_{unit}_1{ext}'),**w, ext=ext)
        readsD['r2'] = expand(join(input_dir, '{sample}_{unit}_2{ext}'),**w, ext=ext)
        # conflict with se pattern matching. Also just take extra time for little benefit
        #readsD['r1_unpaired'] = expand(join(input_dir, "{sample}_{unit}_1.se.trim.fq.gz"),**w)
        #readsD['r2_unpaired'] = expand(join(input_dir, "{sample}_{unit}_2.se.trim.fq.gz") **w)
        return readsD
    return expand(join(input_dir, '{sample}_{unit}.se{ext}'), **w, ext=ext)

# single khmer rule strategy:
# 1. khmer_pe, khmer_se (reads)
# 2. if assembly: assembly khmer (diginorm or not)
rule khmer_pe:
    """
    kmer trim pe reads with khmer 
    """
    input: unpack(get_khmer_inputs)
    output:
        paired=join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
        single=join(khmer_dir,'{sample}_{unit}.single.khmer.fq.gz'),
    message:
        """--- khmer trimming of low-abundance kmers and digital normalization ---"""
    params:
        k = khmer_params.get('ksize', 20),
        Z = khmer_params.get('Z', 18),
        C = khmer_params.get('C', 3),
        memory = khmer_params.get('memory', 4e9),
        cov = khmer_params.get('coverage', 20),
        extra = khmer_params.get('extra', '')
    threads: 10
    log: join(logs_dir, 'khmer/{sample}_{unit}.pe.log')
    benchmark: join(logs_dir, 'khmer/{sample}_{unit}.pe.benchmark')
    conda:  'environment.yml'
    shell: " (interleave-reads.py {input.r1} {input.r2} ) | "
           " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} " 
           " - -o - -M {params.memory}) | (extract-paired-reads.py --gzip "
           " -p {output.paired} -s {output.single}) > {log}"
        
rule khmer_se:
    """
    kmer trim se reads with khmer
    """
    input: get_khmer_inputs
    output: join(khmer_dir, '{sample}_{unit}.se.khmer.fq.gz'),
    message:
        """--- khmer trimming of low-abundance kmers ---"""
    params:
        k = khmer_params['ksize'],
        Z = khmer_params['Z'],
        C = khmer_params['C'],
        memory = khmer_params['memory'],
        cov = khmer_params['coverage'],
        extra = khmer_params['extra']
    threads: 10
    log: join(logs_dir, 'khmer/{sample}_{unit}.se.log')
    benchmark: join(logs_dir, 'khmer/{sample}_{unit}.se.benchmark')
    conda: 'environment.yml'
    shell: "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
           " -M {params.memory} ) "


rule khmer_split_paired:
    input: join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
    output:
        r1=join(khmer_dir, '{sample}_{unit}_1.khmer.fq.gz'),
        r2=join(khmer_dir, '{sample}_{unit}_2.khmer.fq.gz'),
    threads: 10 
    log: join(logs_dir, 'khmer/{sample}_{unit}.split_pe.log')
    benchmark: join(logs_dir, 'khmer/{sample}_{unit}.split_pe.benchmark')
    conda: "environment.yml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """

def get_diginorm_inputs(w):
    reads = []
    paired_ext = ".paired.khmer.fq.gz"
    orphan_ext = ".single.khmer.fq.gz"
    se_ext = ".se.khmer.fq.gz"
    if not is_single_end(**w):
        reads.extend(expand(join(input_dir, '{sample}_{unit}{ext}'),**w, ext=[paired_ext, orphan_ext]))
    else:
        reads.extend(expand(join(input_dir, '{sample}_{unit}{ext}'),**w, ext=se_ext))
    return reads

if diginorm:
    rule khmer_diginorm:
        """
        combine individually kmer-trimmed reads and do diginorm prior to assembly
        """
        input:
            paired=join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            orphan=join(khmer_dir,'{sample}_{unit}.single.khmer.fq.gz'),
            single=join(khmer_dir,'{sample}_{unit}.se.khmer.fq.gz')
        output: 
            paired = join(khmer_dir, '{sample}_{unit}.pe.khmer_diginorm.fq.gz'),
            single = join(khmer_dir, '{sample}_{unit}.se.khmer_diginorm.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_params['ksize'],
            Z = khmer_params['Z'],
            C = khmer_params['C'],
            memory = khmer_params['memory'],
            cov = khmer_params['coverage'],
            extra = khmer_params['extra']
        threads: 10
        log: join(logs_dir, 'khmer/{sample}_{unit}.se.log')
        benchmark: join(logs_dir, 'khmer/{sample}_{unit}.se.benchmark')
        conda: 'environment.yml'
        shell: " zcat {input} | " 
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory} "
               " --diginorm --diginorm-coverage={params.cov}) | (extract-paired-reads.py --gzip "
               " -p {output.paired} -s {output.single}) > {log}"

    rule khmer_split_digniorm_paired:
    input: join(khmer_dir,'{sample}_{unit}.pe.khmer_diginorm.fq.gz'),
    output:
        r1=join(khmer_dir, '{sample}_{unit}_1.khmer_diginorm.fq.gz'),
        r2=join(khmer_dir, '{sample}_{unit}_2.khmer_diginorm.fq.gz'),
    threads: 10
    log: join(logs_dir, 'khmer/{sample}_{unit}.split_pe.log')
    benchmark: join(logs_dir, 'khmer/{sample}_{unit}.split_pe.benchmark')
    conda: "environment.yml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
