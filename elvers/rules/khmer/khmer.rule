khmer_dir = os.path.join(out_dir, config['khmer']['output_dir'])
khmer_params = config['khmer']['params']
diginorm = khmer_params.get('diginorm', True)

def get_trimmed(w):
    readsD = {}
    if not is_single_end(w.sample):
        readsD['r1'] = os.path.join(fastp_dir, f'{w.sample}_1.fastp.fq.gz')
        readsD['r2'] = os.path.join(fastp_dir, f'{w.sample}_2.fastp.fq.gz')
        return readsD
    return os.path.join(input_dir, f'{sample}_se.fastp.fq.gz')


if diginorm:
    rule khmer_paired_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: unpack(get_trimmed)
        output: 
            paired=os.path.join(khmer_dir,'{sample}.paired.khmer.fq.gz'),
            single=os.path.join(khmer_dir,'{sample}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_params.get('ksize', 20),
            Z = khmer_params.get('Z', 18), 
            C = khmer_params.get('C', 3), 
            memory = khmer_params.get('memory', 4e9),
            cov = khmer_params.get('coverage', 20),
            extra = khmer_params.get('extra', '')
        threads: 10
        log: os.path.join(logs_dir, 'khmer/{sample}.paired.diginorm.log')
        benchmark: os.path.join(benchmarks_dir, 'khmer/{sample}.paired.diginorm.benchmark')
        conda:  'environment.yml'
        shell: " (interleave-reads.py {input.r1} {input.r2} ) | "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory} "
               " --diginorm --diginorm-coverage={params.cov}) | (extract-paired-reads.py --gzip "
               " -p {output.paired} -s {output.single}) > {log}"
        #shell: " (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_unpaired} {input.r2_unpaired}) | "

    rule khmer_se_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: get_trimmed
        output: os.path.join(khmer_dir, '{sample}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_params['ksize'],
            Z = khmer_params['Z'],
            C = khmer_params['C'],
            memory = khmer_params['memory'],
            cov = khmer_params['coverage'],
            extra = khmer_params['extra']
        threads: 2
        log: os.path.join(logs_dir, 'khmer/{sample}.se.diginorm.log')
        benchmark: os.path.join(benchmarks_dir, 'khmer/{sample}.se.diginorm.benchmark')
        conda: 'environment.yml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory} --diginorm --diginorm-coverage={params.cov} ) "
    
else:
    rule khmer_paired_no_diginorm:
        """
        kmer trim with khmer, no diginorm
        """
        input: unpack(get_trimmed)
        output: 
            paired=os.path.join(khmer_dir,'{sample}.paired.khmer.fq.gz'),
            single=os.path.join(khmer_dir,'{sample}.se.khmer.fq.gz'),
        message: """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_params.get('ksize', 20),
            Z = khmer_params.get('Z', 18), 
            C = khmer_params.get('C', 3), 
            memory = khmer_params.get('memory', 4e9),
            extra = khmer_params.get('extra', '')
        threads: 10
        log: os.path.join(logs_dir, 'khmer/{sample}.paired.log')
        benchmark: os.path.join(benchmarks_dir, 'khmer/{sample}.paired.benchmark')
        conda:  'environment.yml'
        shell: " (interleave-reads.py {input.r1} {input.r2} )| "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory})"
               " | (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > {log}"

    rule khmer_se_no_diginorm:
        """
        khmer trim se, no diginorm
        """
        input: get_trimmed
        output: os.path.join(khmer_dir, '{sample}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_params['ksize'],
            Z = khmer_params['Z'],
            C = khmer_params['C'],
            memory = khmer_params['memory'],
            extra = khmer_params['extra']
        threads: 2
        log: os.path.join(logs_dir, 'khmer/{sample}.se.log')
        benchmark: os.path.join(benchmarks_dir, 'khmer/{sample}.se.benchmark')
        conda: 'environment.yml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory}) "


rule khmer_split_paired:
    input: os.path.join(khmer_dir,'{sample}.paired.khmer.fq.gz'),
    output:
        r1=os.path.join(khmer_dir, '{sample}_1.khmer.fq.gz'),
        r2=os.path.join(khmer_dir, '{sample}_2.khmer.fq.gz'),
    threads: 2 
    log: os.path.join(logs_dir, 'khmer/{sample}.split_paired.log')
    benchmark: os.path.join(benchmarks_dir, 'khmer/{sample}.split_paired.benchmark')
    conda: "environment.yml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """


