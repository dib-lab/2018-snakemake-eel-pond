assembly_dir = config["elvers_directories"]["outdirs"]["assemble"]
preprocess_dir = config["elvers_directories"]["outdirs"]["preprocess"]
salmon_dir = os.path.join(out_dir, config['salmon']['output_dir'])

salmon_params = config['salmon']['params']

def get_fastp_trimmed(w):
    readsD = {}
    if not is_single_end(**w):
        readsD['r1'] = os.path.join(preprocess_dir, f'{w.sample}_1.fastp.fq.gz')
        readsD['r2'] = os.path.join(preprocess_dir, f'{w.sample}_2.fastp.fq.gz')
        return readsD
    readsD['r'] = os.path.join(preprocess_dir, f'{w.sample}_1.fastp.fq.gz')
    return readsD

rule salmon_index:
    """
    Index the transcriptome for salmon quantification
    """
    input:
        os.path.join(assembly_dir, "{assembly}.fasta") 
    output:
        directory(os.path.join(salmon_dir, "{assembly}.salmonindex"))
    message:
        """--- Indexing the transcriptome with Salmon ---"""
    threads: 10
    params:
        extra = salmon_params['index_params'].get('extra', '')
    log:os.path.join(logs_dir, 'salmon','{assembly}_index.log')
    benchmark:os.path.join(benchmarks_dir, 'salmon','{assembly}_index.benchmark')
    conda: "environment.yml"
	script: "index-wrapper.py"

rule salmon_quant_no_combine:
    """
    Quantify transcripts with Salmon
    """
    input: 
        unpack(get_fastp_trimmed),
        index = os.path.join(salmon_dir, "{assembly}.salmonindex") 
    output:
        quant = os.path.join(salmon_dir,"{sample}.x.{assembly}.salmon", "quant.sf"),
        lib = os.path.join(salmon_dir, "{sample}.x.{assembly}.salmon", "lib_format_counts.json")
    message:
        """--- Quantifying transcripts with Salmon ---"""
    params:
        libtype = salmon_params['quant_params'].get('libtype', 'A'),
        extra = salmon_params['quant_params'].get('extra', '')
    threads: 20
    log: os.path.join(logs_dir, 'salmon/{sample}.x.{assembly}.log')
    benchmark: os.path.join(benchmarks_dir, 'salmon/{sample}.x.{assembly}.benchmark')
    conda: "environment.yml"
    script: "quant-wrapper.py"
