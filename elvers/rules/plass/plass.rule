from os.path import join

logs_dir  = config['elvers_directories']['logs']
ep_params = config['plass']['elvers_params']
prog_params = config['plass']['program_params']

assembly_dir = ep_params['outputs']['outdir']
assembly_extension = ep_params['outputs']['plass_fasta']['extensions']['reference_extensions'][0] # should only be a single entry here, default: '_plass'

BASE = config['basename']

# handle "associated_samples"
associated_samples = {}
if 'assembly_info' in config.keys():
    assemb_info = config['assembly_info']

for ref_ext, ref_info in assemb_info.items():
    if assembly_extension in ref_ext: # check that "_plass" is in the extension
        if ref_info.get('associated_samples'):
            sample_list = ref_info['associated_samples']
            if not ref_ext.startswith('_'):
                ref_ext = '_' + ref_ext
            refname = BASE + ref_ext
            associated_samples[refname] = sample_list

def get_assembly_input(w):
    r1,r2,single =[],[],[]
    readsD = {}
    inputs = prog_params['inputs']
    if 'kmer_trimmed' in inputs:
        ext = '.khmer.fq.gz' 
        input_dir = config['elvers_directories']['outdirs']['preprocess']
    elif 'trimmed' in inputs:
        ext = '.trim.fq.gz'
        input_dir = config['elvers_directories']['outdirs']['preprocess']
    elif 'raw' in inputs:
        ext = '.fq.gz'
        input_dir = config['elvers_directories']['outdirs']['input_data']
    if w.assembly in associated_samples.keys():
        # this assembly has some associated samples
        assembly_subset = associated_samples[w.assembly]
    else: # assume we want to use all samples for this assembly
        assembly_subset = samples['sample'].tolist()
    for s, u in samples.iterrows():
        sample, unit = u['sample'],u['unit']
        if assembly_subset:
            if sample not in assembly_subset:
                continue
        if is_single_end(sample, unit):
            single+=[join(input_dir, f"{sample}_{unit}_se{ext}")]
        else:
            r1+= [join(input_dir, f"{sample}_{unit}_1{ext}")]
            r2+= [join(input_dir, f"{sample}_{unit}_2{ext}")]
    add_single = prog_params.get('add_single_to_paired', False)
    if len(r1) > 0:
        if add_single == True:
            r1 = r1 + single
        readsD['left'] = r1
        readsD['right'] = r2
    else:
        if len(single) > 0:
            readsD['left'] = single
        else:
           sys.stderr.write("\t No samples to assemble. If subsetting, please check that the values of `assembly_subset` match your sample names. See https://dib-lab.github.io/elvers/trinity for details.\n")
           sys.exit(-1)
    return readsD

rule plass:
    input:
        unpack(get_assembly_input)
    output:
        fasta = join(assembly_dir,'{assembly}.fasta')
    message:
        """--- Assembling read data with PLASS --- """
    params:
        # optional parameters
        extra=prog_params.get('extra', '')
    log: join(logs_dir, 'plass','{assembly}.log')
    benchmark: join(logs_dir, 'plass','{assembly}.benchmark')
    threads: 32
    conda: "environment.yml"
	script: "plass-wrapper.py"
