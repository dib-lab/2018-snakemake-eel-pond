import os
from os.path import join

prog = 'paladin'

logs_dir  = config['elvers_directories']['logs']
assembly_dir  = config['elvers_directories']['outdirs']['assemble']

elvers_params = config[prog]['elvers_params']
prog_params = config[prog]['program_params']
index_params = prog_params['index_params']
alignment_params = prog_params['alignment_params']

# set output dir
output_dir = elvers_params['outputs']['outdir']
# set default input dir, extensions
#input_dir = config['elvers_directories']['outdirs']['preprocess']
#ext = '.trim.fq.gz'
# get input we're using in this case
# update input_dir, ext
#assembly_extension = elvers_params['outputs']['paladin_mapped']['extensions']['reference_extensions'][0]
inputs = prog_params.get('inputs')

# handle "associated_samples"
associated_samples = {}
refs = {}
if 'get_reference' in config.keys():
    refs = config.get('reference_info', {})
if 'assembly_info' in config.keys():
    assemb_info = config['assembly_info']
    refs.update(assemb_info)

for ref_ext, ref_info in refs.items(): 
    if ref_info.get('associated_samples'):
        sample_list = ref_info['associated_samples']
        if not ref_ext.startswith('_'):
            ref_ext = '_' + ref_ext
        refname = basename + ref_ext
        associated_samples[refname] = sample_list

def get_paladin_input(w):
    readsD = {}
    # grab list of only the associated samples
    if w.assembly in associated_samples.keys():
        # this assembly has some associated samples
        sample_list = associated_samples[w.assembly]
    else: # assume we want to map all samples to this assembly
        sample_list = samples['sample'].tolist()
    # if paired end:
    if not is_single_end(**w): 
        # figure out directories and extensions
        if 'pear_merged' in inputs:
            input_dir = join(config['elvers_directories']['outdirs']['preprocess'], 'pear')
            ext = '.pear_assembled.fq.gz' # requires pear merging of pe reads
        elif 'trimmed' in inputs:
            input_dir = config['elvers_directories']['outdirs']['preprocess']
            ext = '_1.trim.fq.gz'
        elif 'raw' in inputs:
            ext = '_1.fq.gz'
            input_dir = config['elvers_directories']['outdirs']['input_data']
        #input_dir = elvers_params['input_options'][input_name].get('indir', input_dir )
        #ext = elvers_params['input_options'][input_name]['extensions']['read'].get('common_ext', ext)
        if w.sample in sample_list:
            readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
        return readsD
    # if single end:
    else:
        if 'trimmed' in inputs: 
            input_dir = config['elvers_directories']['outdirs']['preprocess']
            ext = '_se.trim.fq.gz'
        elif 'raw' in inputs:
            ext = '_1.fq.gz'
            input_dir = config['elvers_directories']['outdirs']['input_data']
    if w.sample in sample_list:
        readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
    return readsD

rule paladin_index:
    input: join(assembly_dir, "{assembly}.fasta")
    output: join(output_dir, "{assembly}.fasta.bwt"),
    params: 
        reference_type= index_params.get('reference_type', '3'),
        gff = index_params.get('gff_file', '')
    log: join(logs_dir, 'paladin', "{assembly}_index.log"),
    benchmark: join(logs_dir, 'paladin', "{assembly}_index.benchmark"),
    conda: "environment.yml"
    script: 'paladin-index.py'
   
rule paladin_align:
    input:  
        unpack(get_paladin_input),
        index = join(output_dir, "{assembly}.fasta.bwt"), 
    output: 
        join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.bam"),
    threads: 20
    params:
        f = alignment_params.get('f','125'),
        extra = alignment_params.get('extra', '')
    log: join(logs_dir, 'paladin', "{sample}_{unit}_x_{assembly}.paladin.log"),
    benchmark: join(logs_dir, 'paladin', "{sample}_{unit}_x_{assembly}.paladin.benchmark"),
    conda: "environment.yml"
    script: 'paladin-align.py'
    
rule samtools_sort_paladin:
    input: join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.bam")
    output: join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam") 
    conda: "environment.yml"
    log: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.log")
    benchmark: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.benchmark")
    threads: 5
    shell:"""
    samtools sort -@ {threads} {input} -o {output}
    """

rule samtools_flagstat_paladin:
    input: join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam") 
    output: join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam.flagstat")
    log: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.flagstat.log")
    benchmark: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.flagstat.benchmark")
    conda: "environment.yml"
    shell:"""
    samtools flagstat {input} > {output}
    """
    
rule samtools_index_paladin:
    input: join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam") 
    output: join(output_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam.bai")
    conda: "environment.yml"
    log: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.index.log")
    benchmark: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.index.benchmark")
    shell:"""
    samtools index {input}
    """
