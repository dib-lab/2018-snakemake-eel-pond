assembly_dir = config["elvers_directories"]["outdirs"]["assemble"]
preprocess_dir = config["elvers_directories"]["outdirs"]["preprocess"]
paladin_dir = os.path.join(out_dir, config['paladin']['output_dir'])

paladin_params = config['paladin']['params']
index_params = paladin_params['index_params']
alignment_params = paladin_params['alignment_params']

def get_paladin_input(w):
    readsD = {}
    if not is_single_end(**w): 
        pear_dir = os.path.join(preprocess_dir, 'pear')
        return os.path.join(pear_dir, f'{w.sample}.pear_assembled.fq.gz')
    return os.path.join(preprocess_dir, f'{w.sample}_1.fastp.fq.gz')

rule paladin_index:
    input: os.path.join(assembly_dir, "{assembly}.fasta")
    output: os.path.join(paladin_dir, "{assembly}.fasta.bwt"),
    params: 
        reference_type= index_params.get('reference_type', '3'),
        gff = index_params.get('gff_file', '')
    wildcard_constraints:
        assembly="\w+_plass"
    log: os.path.join(logs_dir, 'paladin', "{assembly}_index.log"),
    benchmark: os.path.join(logs_dir, 'paladin', "{assembly}_index.benchmark"),
    conda: "environment.yml"
    script: 'paladin-index.py'
   
rule paladin_align:
    input:  
        reads = get_paladin_input,
        index = os.path.join(paladin_dir, "{assembly}.fasta.bwt"), 
    output: 
        os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.bam"),
    threads: 20
    params:
        f = alignment_params.get('f','125'),
        extra = alignment_params.get('extra', '')
    wildcard_constraints:
        assembly="\w+_plass"
    log: os.path.join(logs_dir, 'paladin', "{sample}.x.{assembly}.paladin.log"),
    benchmark: os.path.join(logs_dir, 'paladin', "{sample}.x.{assembly}.paladin.benchmark"),
    conda: "environment.yml"
    script: 'paladin-align.py'
    
rule samtools_sort_paladin:
    input: os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.bam")
    output: os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.sort.bam") 
    conda: "environment.yml"
    log: os.path.join(logs_dir, 'paladin',"{sample}.x.{assembly}.paladin.sort.bam.log")
    benchmark: os.path.join(logs_dir, 'paladin',"{sample}.x.{assembly}.paladin.sort.bam.benchmark")
    threads: 5
    shell:
        """
        samtools sort -@ {threads} {input} -o {output}
        """

rule samtools_flagstat_paladin:
    input: os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.sort.bam") 
    output: os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.sort.bam.flagstat")
    wildcard_constraints:
        assembly="\w+_plass"
    log: os.path.join(logs_dir, 'paladin',"{sample}.x.{assembly}.paladin.sort.bam.flagstat.log")
    benchmark: os.path.join(logs_dir, 'paladin',"{sample}.x.{assembly}.paladin.sort.bam.flagstat.benchmark")
    conda: "environment.yml"
    shell:
        """
        samtools flagstat {input} > {output}
        """
    
rule samtools_index_paladin:
    input: os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.sort.bam") 
    output: os.path.join(paladin_dir,"{sample}.x.{assembly}.paladin.sort.bam.bai")
    wildcard_constraints:
        assembly="\w+_plass"
    conda: "environment.yml"
    log: os.path.join(logs_dir, 'paladin',"{sample}.x.{assembly}.paladin.sort.bam.index.log")
    benchmark: os.path.join(logs_dir, 'paladin',"{sample}.x.{assembly}.paladin.sort.bam.index.benchmark")
    shell:
        """
        samtools index {input}
        """
