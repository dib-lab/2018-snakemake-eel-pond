output_dir: output.elvers
basename: elvers
experiment_suffix: ""
logs_dir: logs
benchmarks_dir: benchmarks

elvers_directories:
  rules: rules
  animals: utils/animals
  logs: logs
  outdirs:
    input_data: input_data
    preprocess: preprocess
    assemble: assembly
    annotate: annotation
    quantify: quant
    diffexp: diffexp

urls_begin: ["http", "ftp"]

# useful for paired, single end samples
fq_ends:
  paired:
    - 1
    - 2
  single:
    - 1
pairing:
  paired:
    - pe
  single:
    - se

pipeline: default

## rule params ##
get_data:
  rulefile: utils/get_data.rule
  output_dir: input_data
  output_files:
    - "{sample}_{end}.fq.gz"
  params:
    extra: ""

get_reference:
  rulefile: utils/get_reference.rule
  output_dir: assembly
  output_files:
    - "{basename}_refinput.fasta"
  output_gene_trans_map:
    - "{basename}_refinput.fasta.gene_trans_map"
  params:
    extra: ""

fastp:
  rulefile: fastp/fastp.rule
  output_dir: preprocess
  output_files:
    - "{sample}_{end}.fastp.fq.gz"
    - "{sample}.fastp.json"
    - "{sample}.fastp.html"
  params:
    extra: ""

khmer:
  rulefile: khmer/khmer.rule
  output_dir: preprocess/khmer
  output_files:
    - "{sample}.{pairing}.khmer.fq.gz" # if paired, this is interleaved file. If single end = just se. does this matter?
  params:
    diginorm: True
    ksize: 20
    Z: 18
    C: 3
    memory: 4e9
    coverage: 20
    extra: ""

trinity:
  rulefile: trinity/trinity.rule
  output_dir: assembly
  output_files:
    - "{basename}_trinity.fasta"
    - "{basename}_trinity.fasta.gene_trans_map"
  generates_reference: True
  params:
    # do we want to assemble the single reads with pe reads?
    add_single_to_paired: False
    max_memory: 4G
    seqtype: fq
    extra: ''

dammit:
  rulefile: dammit/dammit.rule
  output_dir: annotation
  output_files:
    - "{reference}.dammit.gff3"
    - "{reference}.dammit.fasta"
  params:
    db_dir: databases
    db_extra: ''
    db_install_only: False
    annot_extra: " --quick "
    busco_group:
      - metazoa
      - eukaryota

salmon:
  rulefile: salmon/salmon.rule
  output_dir: salmon
  output_files:
    - "{reference}.salmonindex"
    - "{sample}.x.{reference}.salmon/quant.sf"
  params:
    index_params:
      extra: ""
    quant_params:
      libtype: A
      extra: ""

deseq2:
  rulefile: deseq2/deseq2.rule
  output_dir: deseq2
  output_files:
    - "{basename}.x.{reference}.deseq2.rds"
    - "{basename}.x.{reference}.deseq2.pca.pdf"
    - "{basename}.x.{reference}.{contrast}.deseq2.tsv"
    - "{basename}.x.{reference}.{contrast}.deseq.padj_0.1.tsv"
    - "{basename}.x.{reference}.{contrast}.deseq2.ma-plot.pdf"
  params:
    gene_trans_map: True
    # contrasts for the deseq2 results method
    contrasts:
      time0-vs-time6:
        - time0
        - time6
    pca:
      labels:
      # columns of sample sheet to use for PCA
        - condition

edgeR:
  rulefile: edgeR/edgeR.rule
  output_dir: edgeR
  output_files:
    - "{basename}.x.{reference}.edgeR.rds"
    - "{basename}.x.{reference}.edgeR.pca.pdf"
    - "{basename}.x.{reference}.{contrast}.edgeR.tsv"
    - "{basename}.x.{reference}.{contrast}.edgeR.padj_0.1.tsv"
    - "{basename}.x.{reference}.{contrast}.edgeR.ma-plot.pdf"
  params:
    # contrasts for the edgeR results method
    contrasts:
      treated-vs-untreated:
        - treated
        - untreated
    mds:
      labels:
      # columns of sample sheet to use for PCA
        - condition

bowtie2:
  rulefile: bowtie2/bowtie2.rule
  output_dir: bowtie2
  output_files:
    - "{sample}.x.{reference}.{pairing}.bam"
  params:
    extra: ''

plass:
  rulefile: plass/plass.rule
  output_dir: assemly
  output_files:
    - "{basename}_plass.fasta"
  generates_reference: True
  params:
    # do we want to assemble the single reads with pe reads?
    add_single_to_paired: False
    extra: ''

pear:
  rulefile: pear/pear.rule
  output_dir: preprocess/pear
  output_files:
    - "{sample}.pear_assembled.fq.gz"
    - "{sample}.pear_discarded.fq.gz"
    - "{sample}.pear_unassembled_{end}.fq.gz"
  params:
    pval: .01
    max_memory: 4G
    extra: ''

paladin:
  rulefile: paladin/paladin.rule
  output_dir: paladin
  output_files:
    # for now, ONLY plass assemblies are allowed
    - "{basename}_plass.paladin.fasta.bwt"
    - "{sample}.x.{basename}_plass.paladin.bam"
    - "{sample}.x.{basename}_plass.paladin.sort.bam"
    - "{sample}.x.{basename}_plass.paladin.sort.bam.flagstat"
    - "{sample}.x.{basename}_plass.paladin.sort.bam.bai"
  params:
    index_params:
      reference_type: '3'
    alignment_params:
      f: 125
      extra: ''

# enable additional alphabets here? or just rm sourmash altogether?
sourmash_sketch_reads:
  rulefile: sourmash/sourmash_sketch_reads.rule
  output_dir: sourmash
  output_files:
    - "{sample}.khmer.fq.sig"
  params:
    k_size: 31
    scaled: 1000
    extra: ''

sourmash_sketch_reference:
  rulefile: sourmash/sourmash_sketch_reference.rule
  output_dir: sourmash
  output_files:
    - "{reference}.fa.sig"
  params:
    k_size: 31
    scaled: 1000
    extra: ""
