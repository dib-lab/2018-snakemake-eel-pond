from os.path import join

data_dir    = config['eelpond_directories']['outdirs']['data']
trim_params = config['trimmomatic']
trim_dir    = trim_params['eelpond_dirname']

rule trimmomatic_pe:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        r1= lambda wildcards: join(data_dir, '{}_{}_1.fq.gz'.format(wildcards.sample,wildcards.unit)), #unpack(get_pretrim_pe)
        r2= lambda wildcards: join(data_dir, '{}_{}_2.fq.gz'.format(wildcards.sample,wildcards.unit))
    output:
        r1=join(trim_dir, "{sample}_{unit}_1.trim.fq.gz"),
        r2=join(trim_dir, "{sample}_{unit}_2.trim.fq.gz"),
        r1_unpaired=join(trim_dir, "{sample}_{unit}_1.se.trim.fq.gz"),
        r2_unpaired=join(trim_dir, "{sample}_{unit}_2.se.trim.fq.gz"),
    message:
        """--- Quality trimming PE read data with Trimmomatic."""
    threads: trim_params.get('cpu', 16)
    params:
        trimmer = (trim_params['trim_cmd'].format(trim_params['adapter_file']['pe_name'])).split(' '),
        extra = ''
    log: join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_pe.log')
    conda: "trimmomatic-env.yaml"
    script: "trimmomatic-pe.py"
