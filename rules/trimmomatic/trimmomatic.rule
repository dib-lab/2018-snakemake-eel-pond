from os.path import join

data_dir    = config['eelpond_directories']['outdirs']['input_data']
trim_params = config['trimmomatic']
trim_dir    = trim_params['eelpond_dirname']


#def get_pretrim(wildcards):
    #if not is_single_end(**wildcards):
    #    return expand(join(data_dir, '{sample}_{unit}_{end}.fq.gz'), **wildcards)
    #return expand(join(data_dir, '{sample}_{unit}_{end}.fq.gz'), **wildcards)

def get_pretrim(w):
    readsD = {}
    if not is_single_end(**w):
        #readsD= dict(zip(['r1','r2'], expand(join(data_dir, '{sample}_{unit}_{end}.fq.gz'), **w))) #samples.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna())) 
        readsD['r1'] = expand(join(data_dir, '{sample}_{unit}_1.fq.gz'),**w)
        readsD['r2'] = expand(join(data_dir, '{sample}_{unit}_2.fq.gz'),**w)
        return readsD
    return expand(join(data_dir, '{sample}_{unit}_1.fq.gz'), **w)

rule trimmomatic_pe:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        unpack(get_pretrim)
        #r1= lambda wildcards: join(data_dir, '{}_{}_1.fq.gz'.format(wildcards.sample,wildcards.unit)),
        #r2= lambda wildcards: join(data_dir, '{}_{}_2.fq.gz'.format(wildcards.sample,wildcards.unit))
    output:
        r1=join(trim_dir, "{sample}_{unit}_1.trim.fq.gz"),
        r2=join(trim_dir, "{sample}_{unit}_2.trim.fq.gz"),
        r1_unpaired=join(trim_dir, "{sample}_{unit}_1.se.trim.fq.gz"),
        r2_unpaired=join(trim_dir, "{sample}_{unit}_2.se.trim.fq.gz"),
    message:
        """--- Quality trimming PE read data with Trimmomatic."""
    threads: trim_params.get('cpu', 16)
    params:
        trimmer = (trim_params['trim_cmd'].format(trim_params['adapter_file']['pe_name'])).split(' '),
        extra = ''
    log: join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_pe.log')
    wrapper:
        '0.27.1/bio/trimmomatic/pe'

rule trimmomatic_se:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        get_pretrim
    output:
        r1=join(trim_dir, "{sample}_{unit}.se.trim.fq.gz"), 
    message:
        """--- Quality trimming SE read data with Trimmomatic."""
    threads: trim_params.get('cpu', 16)
    params:
        trimmer = (trim_params['trim_cmd'].format(trim_params['adapter_file']['se_name'])).split(' '),
        extra = ''
    log:
        join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_se.log')
    wrapper:
        '0.27.1/bio/trimmomatic/se'

