from os.path import join

salmon_params = config['salmon']
quant_dir = salmon_params['eelpond_dirname']

# use if you don't want to collapse technical replicates ("units" column; deseq2 not supported)
def get_trimmed(wildcards):
    readsD = {}
    if not is_single_end(**wildcards):
        readsD['r1'] = expand(join(TRIM_DIR, '{sample}_{unit}_1.trim.fq.gz'),**wildcards)
        readsD['r2'] = expand(join(TRIM_DIR, '{sample}_{unit}_2.trim.fq.gz'),**wildcards)
        return readsD
    readsD['r'] = expand(join(TRIM_DIR, '{sample}_{unit}_se.trim.fq.gz'),**wildcards)
    return readsD

def get_trimmed_combined_pe(wildcards):
    readsD = {}
    r1,r2 = [],[]
    unit_list = units.groupby(level=0).get_group(wildcards.sample)['unit'].tolist()
    for unit in unit_list:
        if not is_single_end(wildcards.sample, unit):
            r1 += [join(TRIM_DIR, wildcards.sample +'_' + unit + '_1.trim.fq.gz')]
            r2 += [join(TRIM_DIR, wildcards.sample +'_' + unit + '_2.trim.fq.gz')]
    if r1:
        readsD['r1'] = r1
        readsD['r2'] = r2
        return readsD

def get_trimmed_combined_se(wildcards):
    readsD = {}
    r = []
    unit_list = units.groupby(level=0).get_group(wildcards.sample)['unit'].tolist()
    for unit in unit_list:
        if is_single_end(wildcards.sample, unit):
            r += [join(TRIM_DIR, wildcards.sample +'_' + unit + '_se.trim.fq.gz')]
            #r += [join(TRIM_DIR, "{wildcards.sample}_{unit}_se.trim.fq.gz")]
    if r:
        readsD['r'] = r
        return readsD


############
rule salmon_index:
    """
    Index the transcriptome for salmon quantification
    """
    input:
        join(ASSEMBLY_DIR, BASE + ".fasta")
    output:
        directory(join(quant_dir, BASE + "_salmon"))
    message:
        """--- Indexing the transcriptome with Salmon ---"""
    threads: 2
    params:
        extra = ''
    log:
        qual_log = join(LOGS_DIR, 'salmon/' + BASE +'_index.log')
    conda: "salmon-env.yaml"
	script: "index-wrapper.py"
	#wrapper:
    #    '0.25.0/bio/salmon/index'

rule salmon_quant_reads_pe:
    """
    Quantify transcripts with Salmon
    """
    input:
        unpack(get_trimmed_combined_pe),
        index = join(quant_dir, "{assembly}", "{assembly}_salmon")
    output:
        quant = join(quant_dir,"{assembly}", "{sample}_{unit}","quant.sf"),
        lib = join(quant_dir, "{assembly}", "{sample}_{unit}","lib_format_counts.json")
    message:
        """--- Quantifying transcripts with Salmon ---"""
    params:
        libtype= 'A', # maybe set in config file
        extra = ''
    threads: 2
    log: join(LOGS_DIR, 'salmon/{sample}_{unit}_x_{assembly}.log')
    conda: "salmon-env.yaml"
    script: "quant-wrapper.py"


rule salmon_quant_reads_se:
    """
    Quantify transcripts with Salmon
    """
    input: 
        unpack(get_trimmed_combined_se),
        index = join(quant_dir, BASE + "_salmon")
    output:
        quant = join(quant_dir, "{sample}_se_x_" + BASE,"quant.sf"),
        lib = join(quant_dir, "{sample}_se_x_" + BASE,"lib_format_counts.json")
    message:
        """--- Quantifying transcripts with Salmon ---"""
    params:
        libtype= 'A', 
        extra = '' 
    threads: 2
    log:
        qual_log = join(LOGS_DIR, 'salmon/{sample}_se_x_' + BASE + '.log')
    conda: "salmon-env.yaml"
    script: "quant-wrapper.py"
	#wrapper:
    #    '0.25.0/bio/salmon/quant/quant-reads'

