from os.path import join

salmon_params = config['salmon']

assembly_dir  = config['eelpond_directories']['outdirs']['assemble']
input_dirname = salmon_params['input_dir']
input_dir     = config['eelpond_directories']['outdirs'][input_dirname]
quant_dir     = salmon_params['eelpond_dirname']
ext           =  salmon_params['input_pattern']
combine_units = salmon_params['extensions']['read']['combine_units']

# use if you don't want to collapse technical replicates ("units" column; deseq2 not supported)
def get_sample_no_combine(w):
    readsD = {}
    if not is_single_end(**w): # note, this requires unit to be in outputs!
        readsD['r1'] = join(input_dir, f'{w.sample}_{w.unit}_1{ext}')
        readsD['r2'] = join(input_dir, f'{w.sample}_{w.unit}_2{ext}')
        return readsD
    readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
    return readsD

def get_sample_combine_units(w):
    readsD = {}
    r1,r2,r = [],[],[]
    unit_list = samples.groupby(level=0).get_group(w.sample)['unit'].tolist()
    for unit in unit_list:
        if not is_single_end(w.sample, unit):
            r1+= [join(input_dir, f"{w.sample}_{unit}_1{ext}")]
            r2+= [join(input_dir, f"{w.sample}_{unit}_2{ext}")]
        else:
            r+= [join(input_dir, f"{w.sample}_{unit}{ext}")]
    if r1:
        readsD['r1'] = r1
        readsD['r2'] = r2
    elif r:
        # salmon can't handle mixed pe/se samples, so if there are samples with some se, some pe, this will only do quant for pe
        readsD['r'] = r
    return readsD

############
rule salmon_index:
    """
    Index the transcriptome for salmon quantification
    """
    input:
        join(assembly_dir, "{assembly}.fasta") 
    output:
        directory(join(quant_dir, "{assembly}.salmonindex"))
    message:
        """--- Indexing the transcriptome with Salmon ---"""
    threads: 10
    params:
        extra = salmon_params['index_params'].get('extra', '')
    log:
        join(LOGS_DIR, 'salmon/{assembly}_index.log')
    conda: "salmon-env.yaml"
	script: "index-wrapper.py"

if combine_units:
    rule salmon_quant_combine_units:
        """
        Quantify transcripts with Salmon
        """
        input:
            unpack(get_sample_combine_units),
            index = join(quant_dir, "{assembly}.salmonindex")
        output:
            quant = join(quant_dir,"{sample}_x_{assembly}.salmon", "quant.sf"),
            lib = join(quant_dir, "{sample}_x_{assembly}.salmon", "lib_format_counts.json")
        message:
            """--- Quantifying transcripts with Salmon ---"""
        params:
            libtype = salmon_params['quant_params'].get('libtype', 'A'),
            extra = salmon_params['quant_params'].get('extra', '')
        threads: 20
        log: join(LOGS_DIR, 'salmon/{sample}_x_{assembly}.log')
        conda: "salmon-env.yaml"
        script: "quant-wrapper.py"
else:
    rule salmon_quant_no_combine:
        """
        Quantify transcripts with Salmon
        """
        input: 
            unpack(get_sample_no_combine),
            index = join(quant_dir, "{assembly}.salmonindex") 
        output:
            quant = join(quant_dir,"{sample}_{unit}_x_{assembly}.salmon", "quant.sf"),
            lib = join(quant_dir, "{sample}_{unit}_x_{assembly}.salmon", "lib_format_counts.json")
        message:
            """--- Quantifying transcripts with Salmon ---"""
        params:
            libtype = salmon_params['quant_params'].get('libtype', 'A'),
            extra = salmon_params['quant_params'].get('extra', '')
        threads: 20
        log:
            join(LOGS_DIR, 'salmon/{sample}_{unit}_x_{assembly}.log') 
        conda: "salmon-env.yaml"
        script: "quant-wrapper.py"
