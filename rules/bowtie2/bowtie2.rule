from os.path import join

# need to modify for "sample" not "r1/r2/r"
#sample = [r1,r2] or sample = [r] gets passed in

trim_dir = config['trimmomatic']['eelpond_dirname']
bt2_params = config['bowtie2']
bt2_dir = bt2_params['eelpond_dirname']

# use if you don't want to collapse technical replicates ("units" column; deseq2 not supported)
def get_trimmed(wildcards):
    readsD = {}
    if not is_single_end(**wildcards):
#        readsD['r1'] = expand(join(trim_dir, '{sample}_{unit}_1.trim.fq.gz'),**wildcards)
#        readsD['r2'] = expand(join(trim_dir, '{sample}_{unit}_2.trim.fq.gz'),**wildcards)
         readsD['sample'] = expand([join(trim_dir, '{sample}_{unit}_1.trim.fq.gz'), join(trim_dir, '{sample}_{unit}_2.trim.fq.gz')],**wildcards)
         return readsD
    readsD['sample'] = expand(join(trim_dir, '{sample}_{unit}_se.trim.fq.gz'),**wildcards)
    return readsD

def get_trimmed_combined_pe(wildcards):
    readsD = {}
    r1,r2 = [],[]
    unit_list = units.groupby(level=0).get_group(wildcards.sample)['unit'].tolist()
    for unit in unit_list:
        if not is_single_end(wildcards.sample, unit):
            r1 += [join(trim_dir, wildcards.sample +'_' + unit + '_1.trim.fq.gz')]
            r2 += [join(trim_dir, wildcards.sample +'_' + unit + '_2.trim.fq.gz')]
    if r1:
        readsD['sample'] = r1 + r2 # hacky - only works without multiple units
        print(readsD)
        return readsD

def get_trimmed_combined_se(wildcards):
    readsD = {}
    r = []
    unit_list = units.groupby(level=0).get_group(wildcards.sample)['unit'].tolist()
    for unit in unit_list:
        if is_single_end(wildcards.sample, unit):
            sample += [join(trim_dir, wildcards.sample +'_' + unit + '_se.trim.fq.gz')]
            #r += [join(trim_dir, "{wildcards.sample}_{unit}_se.trim.fq.gz")]
    if r:
        readsD['sample'] = r
        return readsD

rule bowtie2_index:
    """
    Index the transcriptome for salmon quantification
    """
    input:
        join(ASSEMBLY_DIR, BASE + ".fasta")
    output:
        index = join(bt2_dir, BASE + "_bowtie2.1.bt2")
    message:
        """--- Indexing the transcriptome with Bowtie2 ---"""
    threads: 2
    params:
        extra = ''
    log:
        join(LOGS_DIR, 'bowtie2', BASE +'_index.log')
    conda: 
        'bowtie2-env.yaml'
    script:
        'wrapper.py'
#    shell: 
#        'bowtie2-build {input} {output}'
    #wrapper:
    #    '0.27.1/bio/bowtie/index'

rule bowtie2_map:
    input:
        unpack(get_trimmed_combined_pe), 
        index = rules.bowtie2_index.output.index, #join(bt2_dir, BASE + "_bowtie2"),
    output:
        join(bt2_dir, "{sample}_pe_x_" + BASE + ".bam")
    log:
        "logs/bowtie2/{sample}.log"
    params:
        index = join(bt2_dir, BASE + "_bowtie2"),
        # index="index/genome",  # prefix of reference genome index (built with bowtie2-build)
        extra=" --local "  # optional parameters
    threads: 8
    wrapper:
        "0.27.1/bio/bowtie2/align"
