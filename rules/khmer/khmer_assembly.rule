from os.path import join

khmer_dir = config['khmer']['eelpond_params']['outdir']
khmer_params = config['khmer']['program_params']
diginorm = khmer_params.get('diginorm', True)
    
if khmer_params.get('input_trimmed', True):
    ext = '.trim.fq.gz'
    input_dir = config['eelpond_directories']['outdirs']['preprocess']
# for now, combine samples after a round of per-sample non-diginorm khmer-trimming
elif khmer_params.get('input_kmer_trimmed', True):
    ext = '.khmer.fq.gz'
    input_dir = config['eelpond_directories']['outdirs']['preprocess']
else:
    ext = '.fq.gz'
    input_dir = config['eelpond_directories']['outdirs']['input_data']


def combine_khmer_input(w):
    r1,r2,single =[],[],[]
    readsD = {}
    for s, u in samples.iterrows():
        sample, unit = u['sample'],u['unit']
        if is_single_end(sample, unit):
            single+=[join(input_dir, f"{sample}_se{ext}")]
        else:
            r1+= [join(input_dir, f"{sample}_{unit}_1{ext}")]
            r2+= [join(input_dir, f"{sample}_{unit}_2{ext}")]
    readsD['r1'] = r1
    readsD['r2'] = r2
    readsD['r'] = r
    return readsD

rule cat_and_interleave_pairs:
    """
    interleave pairs as necessary; cat all pe, se files
    """
    input: unpack(get_all_input)
    output:
        paired=join(khmer_dir,'{sample}_{unit}.all_paired.khmer.fq.gz'),
        single=join(khmer_dir,'{sample}_{unit}.all_single.khmer.fq.gz')
    shell:
        " (interleave-reads.py {input.r1} {input.r2} ) 



if diginorm:
    rule khmer_all_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: unpack(get_trimmed)
        output: 
            paired=join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            single=join(khmer_dir,'{sample}_{unit}.single.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_params.get('ksize', 20),
            Z = khmer_params.get('Z', 18), 
            C = khmer_params.get('C', 3), 
            memory = khmer_params.get('memory', 4e9),
            cov = khmer_params.get('coverage', 20),
            extra = khmer_params.get('extra', '')
        threads: 10
        log: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.diginorm.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.diginorm.benchmark')
        conda:  'khmer-env.yaml'
        shell: " (interleave-reads.py {input.r1} {input.r2} ) | "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory} "
               " --diginorm --diginorm-coverage={params.cov}) | (extract-paired-reads.py --gzip "
               " -p {output.paired} -s {output.single}) > {log}"
        #shell: " (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_unpaired} {input.r2_unpaired}) | "

else:
    rule khmer_all_no_diginorm:
        """
        kmer trim with khmer, no diginorm
        """
        input: unpack(get_trimmed)
        output: 
            paired=join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            single=join(khmer_dir,'{sample}_{unit}.single.khmer.fq.gz'),
        message: """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_params.get('ksize', 20),
            Z = khmer_params.get('Z', 18), 
            C = khmer_params.get('C', 3), 
            memory = khmer_params.get('memory', 4e9),
            extra = khmer_params.get('extra', '')
        threads: 10
        log: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.benchmark')
        conda:  'khmer-env.yaml'
        shell: " (interleave-reads.py {input.r1} {input.r2} )| "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory})"
               " | (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > {log}"


rule khmer_split_paired:
    input: join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
    output:
        r1=join(khmer_dir, '{sample}_{unit}_1.khmer.fq.gz'),
        r2=join(khmer_dir, '{sample}_{unit}_2.khmer.fq.gz'),
    threads: 2 
    log: join(LOGS_DIR, 'khmer/{sample}_{unit}.split_pe.log')
    benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.split_pe.benchmark')
    conda: "khmer-env.yaml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """


