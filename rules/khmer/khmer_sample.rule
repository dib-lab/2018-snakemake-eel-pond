from os.path import join

khmer_dir = config['khmer_sample']['eelpond_params']['outdir']
khmer_sample_params = config['khmer_sample']['program_params']
diginorm = khmer_sample_params.get('diginorm', False)
    
if khmer_sample_params.get('input_trimmed', True):
    ext = '.trim.fq.gz'
    khmer_input = config['eelpond_directories']['outdirs']['preprocess']
else:
    ext = '.fq.gz'
    khmer_input = config['eelpond_directories']['outdirs']['combined_data']

def get_trimmed(w):
    readsD = {}
    if is_single_end(**w):
        return join(khmer_input, f'{w.sample}_se{ext}')
    else:
        readsD['r1'] = join(khmer_input, f'{w.sample}_1{ext}')
        readsD['r2'] = join(khmer_input, f'{w.sample}_2{ext}')
        if khmer_sample_params.get('input_trimmed', True):
            readsD['r1_unpaired'] = join(khmer_input, f"{w.sample}_1.se{ext}")
            readsD['r2_unpaired'] = join(khmer_input, f"{w.sample}_2.se{ext}")
        else:
            readsD['r1_unpaired'] = '' 
            readsD['r2_unpaired'] = ''
        return readsD

if diginorm:
    rule khmer_pe_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: unpack(get_trimmed)
        output: 
            paired=join(khmer_dir,'{sample, [A-Za-z0-9_.]+}_paired.khmer.fq.gz'),
            single=join(khmer_dir,'{sample, [A-Za-z0-9_.]+}_single.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_sample_params.get('ksize', 20),
            Z = khmer_sample_params.get('Z', 18), 
            C = khmer_sample_params.get('C', 3), 
            memory = khmer_sample_params.get('memory', 4e9),
            cov = khmer_sample_params.get('coverage', 20),
            extra = khmer_sample_params.get('extra', '')
        threads: 10
        log: join(LOGS_DIR, 'khmer/{sample}.pe.diginorm.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}.pe.diginorm.benchmark')
        conda:  'khmer-env.yaml'
        shell: " (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_unpaired} {input.r2_unpaired}) | "
        #shell: " (interleave-reads.py {input.r1} {input.r2} ) | "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory} "
               " --diginorm --diginorm-coverage={params.cov}) | (extract-paired-reads.py --gzip "
               " -p {output.paired} -s {output.single}) > {log}"

    rule khmer_se_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: get_trimmed
        output: join(khmer_dir, '{sample, [A-Za-z0-9_.]+}_se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_sample_params['ksize'],
            Z = khmer_sample_params['Z'],
            C = khmer_sample_params['C'],
            memory = khmer_sample_params['memory'],
            cov = khmer_sample_params['coverage'],
            extra = khmer_sample_params['extra']
        threads: 2
        log: join(LOGS_DIR, 'khmer/{sample}_se.diginorm.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_se.diginorm.benchmark')
        conda: 'khmer-env.yaml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory} --diginorm --diginorm-coverage={params.cov} ) "
    
else:
    rule khmer_pe_no_diginorm:
        """
        kmer trim with khmer, no diginorm
        """
        input: unpack(get_trimmed)
        output: 
            paired=join(khmer_dir,'{sample, [A-Za-z0-9_.]+}_paired.khmer.fq.gz'),
            single=join(khmer_dir,'{sample, [A-Za-z0-9_.]+}_single.khmer.fq.gz'),
        message: """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_sample_params.get('ksize', 20),
            Z = khmer_sample_params.get('Z', 18), 
            C = khmer_sample_params.get('C', 3), 
            memory = khmer_sample_params.get('memory', 4e9),
            extra = khmer_sample_params.get('extra', '')
        threads: 10
        log: join(LOGS_DIR, 'khmer/{sample}_pe.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_pe.benchmark')
        conda:  'khmer-env.yaml'
        shell: " (interleave-reads.py {input.r1} {input.r2} )| "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory})"
               " | (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > {log}"

    rule khmer_se_no_diginorm:
        """
        khmer trim se, no diginorm
        """
        input: get_trimmed
        output: join(khmer_dir, '{sample, [A-Za-z0-9_.]+}_se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_sample_params['ksize'],
            Z = khmer_sample_params['Z'],
            C = khmer_sample_params['C'],
            memory = khmer_sample_params['memory'],
            extra = khmer_sample_params['extra']
        threads: 2
        log: join(LOGS_DIR, 'khmer/{sample}.se.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}.se.benchmark')
        conda: 'khmer-env.yaml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory}) "



rule khmer_split_paired:
    input: join(khmer_dir,'{sample}_paired.khmer.fq.gz'),
    output:
        r1=join(khmer_dir, '{sample, [A-Za-z0-9_.]+}_1.khmer.fq.gz'),
        r2=join(khmer_dir, '{sample}_2.khmer.fq.gz'),
    threads: 2 
    log: join(LOGS_DIR, 'khmer/{sample}.split_pe.log')
    benchmark: join(LOGS_DIR, 'khmer/{sample}.split_pe.benchmark')
    conda: "khmer-env.yaml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """


