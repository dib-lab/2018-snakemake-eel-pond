from os.path import join

#def get_trimmed_pe(wildcards):
#    readsD = {}
#    if not is_single_end(**wildcards):
#        readsD['r1'] = expand(join(TRIM_DIR, '{sample}_{unit}_1.trim.fq.gz'), **wildcards)[0]
#        readsD['r2'] = expand(join(TRIM_DIR, '{sample}_{unit}_2.trim.fq.gz'), **wildcards)[0]
#        readsD['r1_orphan'] = expand(join(TRIM_DIR, '{sample}_{unit}_1.se.trim.fq.gz'), **wildcards)[0]
#        readsD['r2_orphan'] = expand(join(TRIM_DIR, '{sample}_{unit}_2.se.trim.fq.gz'), **wildcards)[0]
        #import pdb; pdb.set_trace()
#        return readsD

#def get_trimmed_se(wildcards):
#    if is_single_end(**wildcards):
#        return expand(join(TRIM_DIR, '{sample}_{unit}_se.trim.fq.gz'),**wildcards)[0]

rule khmer_read_processing_pe:
    """
    kmer trim and diginorm with khmer
    """
    input:
        #unpack(get_trimmed_pe)
        r1= lambda wildcards: join(TRIM_DIR, '{}_{}_1.trim.fq.gz'.format(wildcards.sample,wildcards.unit)),
        r2= lambda wildcards: join(TRIM_DIR, '{}_{}_2.trim.fq.gz'.format(wildcards.sample,wildcards.unit)),
        r1_orphan= lambda wildcards: join(TRIM_DIR, '{}_{}_1.se.trim.fq.gz'.format(wildcards.sample,wildcards.unit)),
        r2_orphan= lambda wildcards: join(TRIM_DIR, '{}_{}_2.se.trim.fq.gz'.format(wildcards.sample,wildcards.unit)),
    output: 
        paired=join(TRIM_DIR,'{sample}_{unit}.paired.khmer.fq.gz'),
        single=join(TRIM_DIR,'{sample}_{unit}.single.khmer.fq.gz'),
    message:
        """--- khmer trimming of low-abundance kmers and digital normalization ---"""
    params:
        k = '20',
        Z = '18', #20
        C = '3', #4
        memory = '20e9',#60e9
        cov = '20',
        extra = ''
    threads: 10
    log:
        join(LOGS_DIR, 'khmer/{sample}_{unit}_' + BASE + '.log')
    conda: 
        'khmer-env.yaml'
    shell: " (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_orphan} {input.r2_orphan}) | "
           " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory}) | "
		   " (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > {log}"

rule khmer_split_paired:
    input: join(TRIM_DIR,'{sample}_{unit}.paired.khmer.fq.gz'),
    output:
        r1=join(TRIM_DIR, '{sample}_{unit}_1.khmer.fq.gz'),
        r2=join(TRIM_DIR, '{sample}_{unit}_2.khmer.fq.gz'),
    conda: "khmer-env.yaml"
    threads: 2 
    log: join(LOGS_DIR, 'khmer/{sample}_{unit}_split_paired' + BASE + '.log') 
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """

rule khmer_read_processing_se:
    """
    kmer trim and diginorm with khmer
    """
    input: lambda wildcards: join(TRIM_DIR, '{}_{}.se.trim.fq.gz'.format(wildcards.sample,wildcards.unit)), #get_trimmed_se
    output: join(TRIM_DIR, '{sample}_{unit}.se.khmer.fq.gz'),
    message:
        """--- khmer trimming of low-abundance kmers and digital normalization ---"""
    params:
        k = '20',
        Z = '18', #20
        C = '3', #4
        memory = '4e9',#60e9
        cov = '20',
        extra = ''
    threads: 2
    log:
        join(LOGS_DIR, 'khmer/{sample}_{unit}_se_' + BASE + '.log')
    conda:
        'khmer-env.yaml'
    shell:
           "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
           " -M {params.memory}) "
    

