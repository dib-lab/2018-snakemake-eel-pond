import os, re
from os.path import join, dirname
#from utils import is_single_end

#fastqc_zip = "_{}.zip".format(target_suffix)
#fastqc_html = "_{}.html".format(target_suffix)

def get_trimmed(wildcards):
    if not is_single_end(**wildcards): # this also ignores orphans
        return expand(join(TRIM_DIR, '{sample}_{unit}_{end}.trim.fq.gz'), end = ['1','2'],**wildcards)
    return expand(join(TRIM_DIR, '{sample}_{unit}_se.trim.fq.gz'),**wildcards)

def get_pretrim(wildcards):
    if not is_single_end(**wildcards):
        # paired-end sample
        return units.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()
    # single end sample
    return units.loc[(wildcards.sample, wildcards.unit),["fq1"]].dropna() 

rule fastqc_pre_trim:
    input:
        get_pretrim
    output:
        html=join(QC_DIR,'{sample}_{unit}_{end}_fastqc.html'),
        zip=join(QC_DIR,'{sample}_{unit}_{end}_fastqc.zip'),
    params: ""
    log: join(LOGS_DIR, 'fastqc/{sample}_{unit}_{end}.log')
    conda: "fastqc-env.yaml"
	script: "wrapper.py"
	#wrapper:
        #0.27.1/bio/fastqc"

rule fastqc_post_trim:
    input:
        get_trimmed
    output:
        html=join(QC_DIR,'{sample}_{unit}_{end}_trimmed_fastqc.html'),
        zip=join(QC_DIR,'{sample}_{unit}_{end}_trimmed_fastqc.zip'),
    params: ""
    log: join(LOGS_DIR, 'fastqc/{sample}_{unit}_{end}_trimmed.log') 
    wrapper:
        "0.27.1/bio/fastqc"

