import os, re
from os.path import join, dirname

data_dir = config['eelpond_directories']['outdirs']['input_data']
trim_dir = config['trimmomatic']['eelpond_dirname']
qc_dir   = config['fastqc']['eelpond_dirname']

def get_trimmed(wildcards):
    if not is_single_end(**wildcards): 
        return expand(join(trim_dir, '{sample}_{unit}_{end}.fq.gz'), **wildcards) 
    return expand(join(trim_dir, '{sample}_{unit}_{end}.fq.gz'), **wildcards)

def get_pretrim(wildcards):
    if not is_single_end(**wildcards): 
        return expand(join(data_dir, '{sample}_{unit}_{end}.fq.gz'), **wildcards)
    return expand(join(data_dir, '{sample}_{unit}_{end}.fq.gz'), **wildcards)

rule fastqc_trimmed:
    input:
       get_trimmed
    output:
        html=join(qc_dir,'{sample}_{unit}_{end}.fastqc.html'),
        zip=join(qc_dir,'{sample}_{unit}_{end}.fastqc.zip'),
    params: ""
    log: join(LOGS_DIR, 'fastqc/{sample}_{unit}_{end}.log')
    conda: "fastqc-env.yaml"
	script: "wrapper.py"

rule fastqc_pretrim:
    input:
        get_pretrim
    output:
        html=join(qc_dir,'{sample}_{unit}_{end}.fastqc.html'),
        zip=join(qc_dir,'{sample}_{unit}_{end}.fastqc.zip'),
    params: ""
    log: join(LOGS_DIR, 'fastqc/{sample}_{unit}_{end}.log') 
    conda: "fastqc-env.yaml"
	script: "wrapper.py"

