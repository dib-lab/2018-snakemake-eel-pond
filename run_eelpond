#! /usr/bin/env python
"""
Execution script for snakemake eelpond.
"""
# ref: https://github.com/ctb/2018-snakemake-cli/blob/master/run
import argparse
import os
import sys
import pprint
import yaml
import glob
import collections
import snakemake

from ep_utils.utils import *

def find_Snakefile(workdir):
    snakefile = os.path.join(workdir, 'Snakefile')
    assert os.path.exists(snakefile), 'Error: cannot find Snakefile at {}\n'.format(snakefile)
    return snakefile

def find_yaml(workdir, filename, name): 
    # find the workflow config file
    workflowfile = None
    if os.path.exists(filename) and not os.path.isdir(filename):
        workflowfile = filename
    else:
        for suffix in ('', '.yaml', '.yml'):
            tryfile = os.path.join(workdir, filename + suffix)
            if os.path.exists(tryfile) and not os.path.isdir(tryfile):
                sys.stderr.write('\tFound {} file at {}\n'.format(name, tryfile))
                workflowfile = tryfile
                break
    assert workflowfile, 'Error, cannot find specified {} file {}\n'.format(name, filename)
    return workflowfile

def build_default_params(workdir, targets):
    defaultParams = {}
    # first, figure out which parts of the pipeline are being run, and get those defaults
    pipeline_defaultsFile = find_yaml(workdir, os.path.join('ep_utils', 'pipeline_defaults'), 'pipeline_defaults')
    pipeline_defaults = read_yaml(pipeline_defaultsFile)
    # grab general defaults
    defaultParams['basename'] = pipeline_defaults['basename']
    defaultParams['assembly_extensions'] = pipeline_defaults['assembly_extensions']
    # add all directories
    defaultParams['eelpond_directories'] = pipeline_defaults['eelpond_directories']
    # grab targets, and subset by input target
    pipelineTargets = pipeline_defaults['eelpond_pipeline']
    subsetPipelineD = {k: pipelineTargets[k] for k in pipelineTargets.keys() & targets}
    defaultParams['eelpond_pipeline'] = subsetPipelineD
    # next, get defaults for the included rules
    targetRules = []
    for targD in subsetPipelineD.values():
        targetRules+= targD.get('rules', [])
    ruleParamsFiles = []
    includeRules = []
    rules_dir = defaultParams['eelpond_directories']['rules']    
    for rule in targetRules:
        ruleParamsFiles+= glob.glob(os.path.join(workdir, rules_dir, '*', rule + '_params.yaml'))
        includeRules+= glob.glob(os.path.join(workdir, rules_dir, '*', rule + '.rule'))
    for f in ruleParamsFiles:
        defaultParams.update(read_yaml(f))
    defaultParams['include_rules'] = includeRules
    return defaultParams

def build_dirs(workdir, params, targets):
    #build eelpond dir info
    ep_dirs = params['eelpond_directories']
    for d in ep_dirs:
        if 'outdirs' not in d:
            ep_dirs[d] = os.path.join(workdir, d)
        if 'animals' in d:
            ep_dirs[d] = os.path.join(workdir, 'ep_utils', d)
    params['eelpond_directories'] = ep_dirs
    
    #build out dirs for target workflows 
    basename = params['basename']
    if params.get('experiment'):
        outdir = basename + "_out_" + params['experiment']
    else:
        outdir = basename + '_out'
    params['eelpond_directories']['out_dir'] = outdir
    
    outDirs = params['eelpond_directories']['outdirs']
    for targ, outD in outDirs.items():
        outDirs[targ] = os.path.join(outdir, outD)
    params['eelpond_directories']['outdirs'] = outDirs
    
    # build program-specific dirs 
    for targ in targets:
        tools = params['eelpond_pipeline'][targ]['rules']
        targ_dir = outDirs[targ]
        for prog in tools:
            prog_params = params[prog]
            if isinstance(prog_params, dict):
                #prog_dirname = prog_params.get('eelpond_dirname', prog)
                params[prog]['eelpond_dirname'] = targ_dir #os.path.join(targ_dir, prog_dirname)
    return params


def main(args):
    # first, find the Snakefile and configfile
    print('\n--------')
    print('checking for required files:')
    print('--------\n')
    
    thisdir = os.path.abspath(os.path.dirname(__file__))
    snakefile = find_Snakefile(thisdir)
    configfile = find_yaml(thisdir, args.configfile, 'configfile') # find configfile
    if not configfile:
        sys.stderr.write('Error: cannot find configfile {}\n'.format(args.configfile))
        sys.exit(-1)
   
    # grab defaults, including rule-specific default parameters (*_params.yaml files) 
    targs = args.targets
    if 'full' in targs:
        targs = ['preprocess', 'kmer_trim', 'assemble', 'annotation', 'quantification']
    paramsD = build_default_params(thisdir, targs)
    # next, grab all params in user config file 
    configD = read_yaml(configfile)
    # update defaults with user-specified parameters
    update_nested_dict(paramsD,configD) # configD takes priority over default params 
    # use params to build directory structure
    paramsD = build_dirs(thisdir, paramsD, targs)
    
    assembInput = paramsD.get('assemblyinput', None)
    if assembInput:
        if assembInput.get('assembly', None):
            assemblyfile = paramsD['assemblyinput']['assembly']
            assert os.path.exists(assemblyfile), 'Error: cannot find input assembly at {}\n'.format(assemblyfile) 
            sys.stderr.write('\tFound input assembly at {}\n'.format(assemblyfile))
            gtmap = paramsD['assemblyinput']['gene_trans_map']
            assert os.path.exists(gtmap), 'Error: cannot find assembly gene_trans_map at {}\n'.format(gtmap) 
            sys.stderr.write('\tFound input assembly gene-transcript map at {}\n'.format(gtmap))
            input_assembly_extension = paramsD['assemblyinput'].get('assembly_extension', None)
            if input_assembly_extension:
                exts =  paramsD.get('assembly_extensions', [""])
                paramsD['assembly_extensions'] = list(set(exts + [input_assembly_extension]))
        
    # Note: Passing a configfile allows nested yaml/dictionary format. 
    # Passing these params in via `config` would require a flat dictionary.
    paramsfile = os.path.join(os.path.dirname(configfile), '.ep_' + os.path.basename(configfile))
    sys.stderr.write('\tAdded default parameters from rule-specific params files.\n\tWriting full params to {}\n'.format(paramsfile))
    write_yaml(paramsD, paramsfile)

    print('--------')
    print('details!')
    print('\tsnakefile: {}'.format(snakefile))
    print('\tconfig: {}'.format(configfile))
    print('\tparams: {}'.format(paramsfile))
    print('\ttargets: {}'.format(repr(targs)))
    print('--------')

    # run!!
    # params file becomes snakemake configfile
    status = snakemake.snakemake(snakefile, configfile=paramsfile, use_conda=True, 
                                 targets=targs, printshellcmds=True,
                                 dryrun=args.dry_run, lock=not args.nolock,
                                 verbose=args.verbose, debug_dag=args.debug)
    
    if status: # translate "success" into shell exit code of 0
       return 0
    return 1



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='run snakemake eelpond', usage='''run_eelpond <configfile.yaml>  [<target> ...]

Run eelpond snakemake workflows, using the given configfile.

Targets:

   full               - run full workflow (default)
   preprocess         - preprocess reads 
   kmer_trim          - kmer trim preprocessed reads
   assemble           - transcriptome assembly 
   annotation         - annotate transcriptome assembly
   quantififcation    - read quantification 
   clean              - remove target dirs ** not enabled yet! **

For a quickstart, run this:

   run_eelpond nema-test full

from the main eelpond directory.

''')

    parser.add_argument('configfile')
    parser.add_argument('targets', nargs='*', default=['full'])
    parser.add_argument('-n', '--dry-run', action='store_true')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('--nolock', action='store_true')
    parser.add_argument('--unlock', action='store_true')
    parser.add_argument('--experiment', default=None)
    ### to do: enable the option below
    parser.add_argument('--build_paramsfile', action='store_true', help='just build the default parameter file')
    args = parser.parse_args()

    sys.exit(main(args))
